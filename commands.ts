import type { Context, NarrowedContext } from "telegraf";
import { cards, sql } from "./config";
import { cash } from "./config";
import { Message, Update } from "telegraf/typings/core/types/typegram";
import {readFile} from "fs"

export async function ocinfo(ctx: NarrowedContext<Context<Update>, Update.MessageUpdate<Message>>) {
    try {
        if (!cash.has(ctx.message.from.id)) {
            await sql.query(`INSERT INTO users(id, name, bals, coins, cards, time, time2) values(${ctx.message?.from.id}, '${ctx.message?.from.username}', 0, 0, Array[]::integer[], 0, 0)`);
        }
    } catch {} finally {
        cash.add(ctx.message.from.id);
    }
    
    await ctx.reply(`**–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è üîÆ**

__–ö–∞–∂–¥—ã–µ 7 –º–∏–Ω—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å /oc –∏ –æ—Ç–∫—Ä—ã—Ç—å 1 –∫–∞—Ä—Ç—É, –≤—Å–µ–≥–æ –≤ –∏–≥—Ä–µ 49 –∫–∞—Ä—Ç.
–°—Ä–µ–¥–∏ —ç—Ç–∏—Ö –∫–∞—Ä—Ç –µ—Å—Ç—å —Å–≤–æ–∏ —Ä–µ–¥–∫–æ—Å—Ç–∏ –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ –¥–∞—é—Ç —Ä–∞–∑–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ë–∞–ª–ª–æ–≤ –¥–ª—è –†–µ–π—Ç–∏–Ω–≥–∞ –∏ –î—Ä–∞–≥–µ–Ω–∫–æ–∏–Ω–æ–≤, –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –†–µ–¥–∫–∏–π –°—É–Ω–¥—É–∫, –≥–¥–µ –Ω–µ –ø–∞–¥–∞–µ—Ç –û–±—ã—á–Ω–∞—è –∫–∞—Ä—Ç–∞, –∞ –ø–∞–¥–∞—é—Ç —Ç–æ–ª—å–∫–æ –∫–∞—Ä—Ç—ã –≤—ã—Å—à–µ–π —Å—Ç–µ–ø–µ–Ω–∏.
        
üç™ –†–µ–¥–∫–æ—Å—Ç–∏: 
    
–û–±—ã—á–Ω–∞—è [–®–∞–Ω—Å 90%] (—Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –†–µ–¥–∫–æ–≥–æ —Å—É–Ω–¥—É–∫–∞ [–®–∞–Ω—Å 0%])
        
–°—Ä–µ–¥–Ω—è—è: [–®–∞–Ω—Å 5%] (—Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –†–µ–¥–∫–æ–≥–æ —Å—É–Ω–¥—É–∫–∞ [–®–∞–Ω—Å 80%])
        
–ú–∞–≥–∏—á–µ—Å–∫–∞—è: [–®–∞–Ω—Å 3%] (—Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –†–µ–¥–∫–æ–≥–æ —Å—É–Ω–¥—É–∫–∞ [–®–∞–Ω—Å 10%])
        
–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è:  [–®–∞–Ω—Å 1.2%] (—Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –†–µ–¥–∫–æ–≥–æ —Å—É–Ω–¥—É–∫–∞ [–®–∞–Ω—Å 5%])
        
–ú–∏—Ñ–∏—á–µ—Å–∫–∞—è: [–®–∞–Ω—Å 0.8%] (—Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –†–µ–¥–∫–æ–≥–æ —Å—É–Ω–¥—É–∫–∞ [–®–∞–Ω—Å 3%])
          
–°–ø–µ—Ü–∞–∏–ª—å–Ω–∞—è: [–®–∞–Ω—Å 2%] (–ü–∞–¥–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å —Ä–µ–¥–∫–æ–≥–æ —Å—É–Ω—É–¥–∫–∞)
        
–ü–µ—Ä–≤–æ—Å—Ö–æ–¥–Ω–∞—è: [–®–∞–Ω—Å 0.01%] (—Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –†–µ–¥–∫–æ–≥–æ —Å—É–Ω—É–¥–∫–∞ [–®–∞–Ω—Å 0.1%])
        
¬ª –ß—Ç–æ-–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞–ø–∏—à–∏—Ç–µ /top 
        
¬ª –ß—Ç–æ-–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –Ω–∞–ø–∏—à–∏—Ç–µ /stats__`);
};

export async function oc(ctx: NarrowedContext<Context<Update>, Update.MessageUpdate<Message>>) {
    try {
        if (!cash.has(ctx.message.from.id)) {
            await sql.query(`INSERT INTO users(id, name, bals, coins, cards, time, time2) values(${ctx.message?.from.id}, '${ctx.message?.from.username}', 0, 0, ARRAY[]::integer[], 0, 0)`);
        }
    } catch {} finally {
        cash.add(ctx.message.from.id);
    }
    try {
        const data = await sql.query(`SELECT * from users where id=${ctx.message?.from.id}`);
        if (Date.now() - Number(data.rows[0].time) < 420000) return await ctx.reply(`–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –±–æ—Ç–∞.
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ä–∞–∑ –≤ 7 –º–∏–Ω—É—Ç.
    
‚Äî –ß—Ç–æ-–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞, –≤–∞–º –Ω—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å –µ—â—ë ${Math.floor((Number(data.rows[0].time)+420000 - Date.now())/1000)} —Å–µ–∫—É–Ω–¥`);
        const randomNumber = Math.floor(Math.random() * 1e4);
        const rare = randomNumber <= 9000 ? "c" :
        randomNumber <= 9500 ? "u" :
        randomNumber <= 9800 ? "m" :
        randomNumber <= 9920 ? "l" :
        randomNumber <= 9999 ? "i" :
        randomNumber <= 10000 ? "p" : "p";
        const bals = Math.floor((
            rare === "c" ? 50 :
            rare === "u" ? 80 :
            rare === "m" ? 130 :
            rare === "l" ? 200 :
            rare === "i" ? 170 :
            rare === "p" ? 500 : 0
        ) + Math.random() * (rare === "p" ? 500 : 20));
        const card = cards[rare][0] + Math.floor(Math.random() * ( cards[rare][1] - cards[rare][0]));
        const coins = Math.floor((
            rare === "c" ? 1 :
            rare === "u" ? 20 :
            rare === "m" ? 50 :
            rare === "l" ? 50 :
            rare === "i" ? 70 :
            rare === "p" ? 200 : 0
        ) + Math.random() * (
            rare === "c" ? 10 :
            rare === "u" ? 10 :
            rare === "m" ? 0 :
            rare === "l" ? 20 :
            rare === "i" ? 20 :
            rare === "p" ? 300 : 0
        ));
        const copy = new Set(data.rows[0].cards);
        copy.add(card);
        const arr = Array.from(copy);
        let caption = `‚Ä¢ –í—ã –æ—Ç–∫—Ä—ã–ª–∏ –ù–∞–±–æ—Ä –ö–∞—Ä—Ç, –≤–∞–º –≤—ã–ø–∞–ª–∞: ${
            rare === "c" ? "–û–±—ã—á–Ω–∞—è" :
            rare === "u" ? "–°—Ä–µ–¥–Ω—è—è" :
            rare === "m" ? "–ú–∞–≥–∏—á–µ—Å–∫–∞—è" :
            rare === "l" ? "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è" :
            rare === "i" ? "–ú–∏—Ñ–∏—á–µ—Å–∫–∞—è" :
            rare === "p" ? "–ü–µ—Ä–≤–æ—Å—Ö–æ–¥–Ω–∞—è" : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è"
    } –ö–∞—Ä—Ç–∞ [–®–∞–Ω—Å: ${
            rare === "c" ? "90%" :
            rare === "u" ? "5%" :
            rare === "m" ? "3%" :
            rare === "l" ? "1.2%" :
            rare === "i" ? "0.8%" :
            rare === "p" ? "0.01%" : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è"
    }] –í—ã —Å–æ–±—Ä–∞–ª–∏ ${bals} –ë–∞–ª–ª–æ–≤ –∏ ${coins} –î—Ä–∞–≥–µ–Ω–∫–æ–∏–Ω–æ–≤.
    
‚Äî –¢–µ–∫—É—â–∞—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤: ${data.rows[0].bals + bals}
    
‚Äî –¢–µ–∫—É—â–∞—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –î—Ä–∞–≥–µ–Ω–ö–æ–∏–Ω–æ–≤: ${data.rows[0].coins + coins}
    
‚Äî –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å –æ—Ç–∫—Ä—ã—Ç–æ ${arr.length} –∫–∞—Ä—Ç –∏–∑ 49`
        readFile(`./cards/${card}.jpg`, {}, async (err, data) => {
            await ctx.sendPhoto({source: data}, {caption: caption});
        });
        await sql.query(`UPDATE users SET coins=coins+${coins}, bals=bals+${bals}, cards=ARRAY${JSON.stringify(arr)}::integer[], time=${Date.now()} WHERE id=${ctx.message?.from.id}`);
    } catch (e) {
        console.log(e);
    }
};

export async function ocrare(ctx: NarrowedContext<Context<Update>, Update.MessageUpdate<Message>>) {
    try {
        if (!cash.has(ctx.message.from.id)) {
            await sql.query(`INSERT INTO users(id, name, bals, coins, cards, time, time2) values(${ctx.message?.from.id}, '${ctx.message?.from.username}', 0, 0, ARRAY[]::integer[], 0, 0)`);
        }
    } catch {} finally {
        cash.add(ctx.message.from.id);
    }
    try {
        const data = await sql.query(`SELECT * from users where id=${ctx.message?.from.id}`);
        if (Date.now() - Number(data.rows[0].time2) < 180000) return await ctx.reply(`–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –±–æ—Ç–∞.
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ä–∞–∑ –≤ 3 –º–∏–Ω—É—Ç.
        
‚Äî –ß—Ç–æ-–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞, –≤–∞–º –Ω—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å –µ—â—ë ${Math.floor((Number(data.rows[0].time2)+180000 - Date.now())/1000)} —Å–µ–∫—É–Ω–¥`);
        if (Number(data.rows[0].coins) < 200) return await ctx.reply(`–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–∞–ª—é—Ç—ã —á—Ç–æ-–±—ã –æ—Ç–∫—Ä—ã—Ç—å –†–µ–¥–∫–∏–π —Å—É–Ω–¥—É–∫. [–¶–µ–Ω–∞: 200 –î—Ä–∞–≥–µ–Ω–ö–æ–∏–Ω–æ–≤]
–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –î—Ä–∞–≥–µ–Ω–ö–æ–∏–Ω–æ–≤: ${200 - Number(data.rows[0].coins)}`);
        const randomNumber = Math.floor(Math.random() * 1e3);
        const rare = randomNumber <= 800 ? "u" :
        randomNumber <= 900 ? "m" :
        randomNumber <= 950 ? "l" :
        randomNumber <= 980 ? "i" :
        randomNumber <= 999 ? "s" :
        randomNumber <= 1000 ? "p" : "p"
        const bals = Math.floor((
            rare === "u" ? 80 :
            rare === "m" ? 130 :
            rare === "l" ? 200 :
            rare === "i" ? 170 :
            rare === "p" ? 500 :
            rare === "s" ? 500 : 0
        ) + Math.random() * (rare === "p" ? 500 : 20) * 1.25);
        const card = cards[rare][0] + Math.floor(Math.random() * ( cards[rare][1] - cards[rare][0]))
        const coins = Math.floor((
            rare === "u" ? 20 :
            rare === "m" ? 50 :
            rare === "l" ? 50 :
            rare === "i" ? 70 :
            rare === "p" ? 200 :
            rare === "s" ? 0 : 0
        ) + Math.random() * (
            rare === "u" ? 10 :
            rare === "m" ? 0 :
            rare === "l" ? 20 :
            rare === "i" ? 20 :
            rare === "p" ? 300 :
            rare === "s" ? 0 : 0
        ) - 1 * 1.25);
        const copy = new Set(data.rows[0].cards)
        copy.add(card)
        const arr = Array.from(copy)
        let caption = `‚Ä¢ –í—ã –æ—Ç–∫—Ä—ã–ª–∏ –ù–∞–±–æ—Ä –ö–∞—Ä—Ç, –≤–∞–º –≤—ã–ø–∞–ª–∞: ${
            rare === "u" ? "–°—Ä–µ–¥–Ω—è—è" :
            rare === "m" ? "–ú–∞–≥–∏—á–µ—Å–∫–∞—è" :
            rare === "l" ? "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è" :
            rare === "i" ? "–ú–∏—Ñ–∏—á–µ—Å–∫–∞—è" :
            rare === "p" ? "–ü–µ—Ä–≤–æ—Å—Ö–æ–¥–Ω–∞—è" : "–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è"
    } –ö–∞—Ä—Ç–∞ [–®–∞–Ω—Å: ${
            rare === "u" ? "80%" :
            rare === "m" ? "10%" :
            rare === "l" ? "5%" :
            rare === "i" ? "3%" :
            rare === "p" ? "1.9%" : "0.1%"
    }] –í—ã —Å–æ–±—Ä–∞–ª–∏ ${bals} –ë–∞–ª–ª–æ–≤ –∏ ${coins} –î—Ä–∞–≥–µ–Ω–∫–æ–∏–Ω–æ–≤.
    
‚Äî –¢–µ–∫—É—â–∞—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤: ${data.rows[0].bals + bals}
    
‚Äî –¢–µ–∫—É—â–∞—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –î—Ä–∞–≥–µ–Ω–ö–æ–∏–Ω–æ–≤: ${data.rows[0].coins + coins}
    
‚Äî –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å –æ—Ç–∫—Ä—ã—Ç–æ ${arr.length} –∫–∞—Ä—Ç –∏–∑ 49`
        readFile(`./cards/${card}.jpg`, {}, async (err, data) => {
            await ctx.sendPhoto({source: data}, {caption: caption});
        });
        await sql.query(`UPDATE users SET coins=coins+${coins}, bals=bals+${bals}, cards=ARRAY${JSON.stringify(arr)}::integer[], time2=${Date.now()} WHERE id=${ctx.message?.from.id}`);
    } catch (e) {
        console.log(e);
    }
};

export async function top(ctx: NarrowedContext<Context<Update>, Update.MessageUpdate<Message>>) {
    try {
        if (!cash.has(ctx.message.from.id)) {
            await sql.query(`INSERT INTO users(id, name, bals, coins, cards, time, time2) values(${ctx.message?.from.id}, '${ctx.message?.from.username}', 0, 0, Array[]::integer[], 0, 0)`);
        }
    } catch {} finally {
        cash.add(ctx.message.from.id);
    }
    try {
        const data = await sql.query(`SELECT name, bals, id from users ORDER BY bals DESC`);
        let position = 0;
        for (let i = 0; i < data.rows.length; i++) {
            console.log(data.rows[i].id, ctx.message?.from.id)
            if (Number(data.rows[i].id) === ctx.message?.from.id) {position = i};
        }
        let message = `üîó –†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –ö–æ–ª–∏—á–µ—Å—Ç–≤—É –ë–∞–ª–ª–æ–≤:

    üß¨ 1 ‚Äî ${data.rows[0].name} [${data.rows[0].bals} –ë–∞–ª–ª–æ–≤]`;
        data.rows.forEach((v, i) => {
            if (i === 0 || i >= 10) return;
            message+=`\n${i+1}. ${v.name} [${v.bals} –ë–∞–ª–ª–æ–≤]`
        });
        await ctx.reply(message + `   
–í–∞—à–µ –º–µ—Å—Ç–æ –≤ —Ç–æ–ø–µ: ${position+1} [${data.rows[position].bals} –ë–∞–ª–ª–æ–≤]`);
    } catch (e) {
        console.log(e);
    }
};

export async function stats(ctx: NarrowedContext<Context<Update>, Update.MessageUpdate<Message>>) {
    try {
        if (!cash.has(ctx.message.from.id)) {
            await sql.query(`INSERT INTO users(id, name, bals, coins, cards, time, time2) values(${ctx.message?.from.id}, '${ctx.message?.from.username}', 0, 0, Array[]::integer[], 0, 0)`);
        }
    } catch {} finally {
        cash.add(ctx.message.from.id);
    }
    try {
        const data = await sql.query(`SELECT coins, bals, id, cards from users ORDER BY bals DESC`);
        let position = 0;
        for (let i = 0; i < data.rows.length; i++) {
            if (Number(data.rows[i].id) === ctx.message?.from.id) {position = i};
        }

        await ctx.reply(`–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è:

–ú–µ—Å—Ç–æ –≤ —Ç–æ–ø–µ: ${position+1}
–ß–∏—Å–ª–æ –±–∞–ª–ª–æ–≤: ${data.rows[position].bals}
–ß–∏—Å–ª–æ –î—Ä–∞–≥–µ–Ω–ö–æ–∏–Ω–æ–≤: ${data.rows[position].coins}
–û—Ç–∫—Ä—ã—Ç–æ –∫–∞—Ä—Ç: ${data.rows[position].cards.length} –∏–∑ 49`);
    } catch (e) {
        console.log(e);
    }
}